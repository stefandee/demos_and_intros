#include <dos.h>
#include <mem.h>
#include "xmode.h"

static int _Width;
static int _Height;
static int _ScanLine;
char* far vga;

Register vm360x360[] =
	{
	{ 0x3c2, 0x0, 0x67},
	{ 0x3d4, 0x0, 0x6b},
	{ 0x3d4, 0x1, 0x59},
	{ 0x3d4, 0x2, 0x5a},
	{ 0x3d4, 0x3, 0x8e},
	{ 0x3d4, 0x4, 0x5e},
	{ 0x3d4, 0x5, 0x8a},
	{ 0x3d4, 0x6, 0xbf},
	{ 0x3d4, 0x7, 0x1f},
	{ 0x3d4, 0x8, 0x0},
	{ 0x3d4, 0x9, 0x40},
	{ 0x3d4, 0x10, 0x88},
	{ 0x3d4, 0x11, 0x85},
	{ 0x3d4, 0x12, 0x67},
	{ 0x3d4, 0x13, 0x2d},
	{ 0x3d4, 0x14, 0x0},
	{ 0x3d4, 0x15, 0x6d},
	{ 0x3d4, 0x16, 0xba},
	{ 0x3d4, 0x17, 0xe3},
	{ 0x3c4, 0x1, 0x1},
	{ 0x3c4, 0x4, 0x6},
	{ 0x3ce, 0x5, 0x40},
	{ 0x3ce, 0x6, 0x5},
	{ 0x3c0, 0x10, 0x41},
	{ 0x3c0, 0x13, 0x0}
	};

Register vm256x256[] =
	{
	{ 0x3c2, 0x0, 0xe3},
	{ 0x3d4, 0x0, 0x5f},
	{ 0x3d4, 0x1, 0x3f},
	{ 0x3d4, 0x2, 0x40},
	{ 0x3d4, 0x3, 0x82},
	{ 0x3d4, 0x4, 0x4a},
	{ 0x3d4, 0x5, 0x9a},
	{ 0x3d4, 0x6, 0x23},
	{ 0x3d4, 0x7, 0xb2},
	{ 0x3d4, 0x8, 0x0},
	{ 0x3d4, 0x9, 0x61},
	{ 0x3d4, 0x10, 0xa},
	{ 0x3d4, 0x11, 0xac},
	{ 0x3d4, 0x12, 0xff},
	{ 0x3d4, 0x13, 0x20},
	{ 0x3d4, 0x14, 0x0},
	{ 0x3d4, 0x15, 0x7},
	{ 0x3d4, 0x16, 0x1a},
	{ 0x3d4, 0x17, 0xe3},
	{ 0x3c4, 0x1, 0x1},
	{ 0x3c4, 0x4, 0x6},
	{ 0x3ce, 0x5, 0x40},
	{ 0x3ce, 0x6, 0x5},
	{ 0x3c0, 0x10, 0x41},
	{ 0x3c0, 0x13, 0x0}
	};

Register vm320x200[] =
	{
	{ 0x3c2, 0x0, 0x63},
	{ 0x3d4, 0x0, 0x5f},
	{ 0x3d4, 0x1, 0x4f},
	{ 0x3d4, 0x2, 0x50},
	{ 0x3d4, 0x3, 0x82},
	{ 0x3d4, 0x4, 0x54},
	{ 0x3d4, 0x5, 0x80},
	{ 0x3d4, 0x6, 0xbf},
	{ 0x3d4, 0x7, 0x1f},
	{ 0x3d4, 0x8, 0x0},
	{ 0x3d4, 0x9, 0x41},
	{ 0x3d4, 0x10, 0x9c},
	{ 0x3d4, 0x11, 0x8e},
	{ 0x3d4, 0x12, 0x8f},
	{ 0x3d4, 0x13, 0x28},
	{ 0x3d4, 0x14, 0x0},
	{ 0x3d4, 0x15, 0x96},
	{ 0x3d4, 0x16, 0xb9},
	{ 0x3d4, 0x17, 0xe3},
	{ 0x3c4, 0x1, 0x1},
	{ 0x3c4, 0x4, 0x6},
	{ 0x3ce, 0x5, 0x40},
	{ 0x3ce, 0x6, 0x5},
	{ 0x3c0, 0x10, 0x41},
	{ 0x3c0, 0x13, 0x0}
	};

Register vm320x240[] =
	{
	{ 0x3c2, 0x0, 0xe3},
	{ 0x3d4, 0x0, 0x5f},
	{ 0x3d4, 0x1, 0x4f},
	{ 0x3d4, 0x2, 0x50},
	{ 0x3d4, 0x3, 0x82},
	{ 0x3d4, 0x4, 0x54},
	{ 0x3d4, 0x5, 0x80},
	{ 0x3d4, 0x6, 0xd},
	{ 0x3d4, 0x7, 0x3e},
	{ 0x3d4, 0x8, 0x0},
	{ 0x3d4, 0x9, 0x41},
	{ 0x3d4, 0x10, 0xea},
	{ 0x3d4, 0x11, 0xac},
	{ 0x3d4, 0x12, 0xdf},
	{ 0x3d4, 0x13, 0x28},
	{ 0x3d4, 0x14, 0x0},
	{ 0x3d4, 0x15, 0xe7},
	{ 0x3d4, 0x16, 0x6},
	{ 0x3d4, 0x17, 0xe3},
	{ 0x3c4, 0x1, 0x1},
	{ 0x3c4, 0x4, 0x6},
	{ 0x3ce, 0x5, 0x40},
	{ 0x3ce, 0x6, 0x5},
	{ 0x3c0, 0x10, 0x41},
	{ 0x3c0, 0x13, 0x0}
	};

Register vm360x400[] =
	{
	{ 0x3c2, 0x0, 0x67},
	{ 0x3d4, 0x0, 0x6b},
	{ 0x3d4, 0x1, 0x59},
	{ 0x3d4, 0x2, 0x5a},
	{ 0x3d4, 0x3, 0x8e},
	{ 0x3d4, 0x4, 0x5e},
	{ 0x3d4, 0x5, 0x8a},
	{ 0x3d4, 0x6, 0xbf},
	{ 0x3d4, 0x7, 0x1f},
	{ 0x3d4, 0x8, 0x0},
	{ 0x3d4, 0x9, 0x40},
	{ 0x3d4, 0x10, 0x9c},
	{ 0x3d4, 0x11, 0x8e},
	{ 0x3d4, 0x12, 0x8f},
	{ 0x3d4, 0x13, 0x2d},
	{ 0x3d4, 0x14, 0x0},
	{ 0x3d4, 0x15, 0x96},
	{ 0x3d4, 0x16, 0xb9},
	{ 0x3d4, 0x17, 0xe3},
	{ 0x3c4, 0x1, 0x1},
	{ 0x3c4, 0x4, 0x6},
	{ 0x3ce, 0x5, 0x40},
	{ 0x3ce, 0x6, 0x5},
	{ 0x3c0, 0x10, 0x41},
	{ 0x3c0, 0x13, 0x0}
	};

Register vm320x400[] =
	{
	{ 0x3c2, 0x0, 0x63},
	{ 0x3d4, 0x0, 0x5f},
	{ 0x3d4, 0x1, 0x4f},
	{ 0x3d4, 0x2, 0x50},
	{ 0x3d4, 0x3, 0x82},
	{ 0x3d4, 0x4, 0x54},
	{ 0x3d4, 0x5, 0x80},
	{ 0x3d4, 0x6, 0xbf},
	{ 0x3d4, 0x7, 0x1f},
	{ 0x3d4, 0x8, 0x0},
	{ 0x3d4, 0x9, 0x40},
	{ 0x3d4, 0x10, 0x9c},
	{ 0x3d4, 0x11, 0x8e},
	{ 0x3d4, 0x12, 0x8f},
	{ 0x3d4, 0x13, 0x28},
	{ 0x3d4, 0x14, 0x0},
	{ 0x3d4, 0x15, 0x96},
	{ 0x3d4, 0x16, 0xb9},
	{ 0x3d4, 0x17, 0xe3},
	{ 0x3c4, 0x1, 0x1},
	{ 0x3c4, 0x4, 0x6},
	{ 0x3ce, 0x5, 0x40},
	{ 0x3ce, 0x6, 0x5},
	{ 0x3c0, 0x10, 0x41},
	{ 0x3c0, 0x13, 0x0}
	};

Register vm360x270[] =
	{
	{ 0x3c2, 0x0, 0xe7},
	{ 0x3d4, 0x0, 0x6b},
	{ 0x3d4, 0x1, 0x59},
	{ 0x3d4, 0x2, 0x5a},
	{ 0x3d4, 0x3, 0x8e},
	{ 0x3d4, 0x4, 0x5e},
	{ 0x3d4, 0x5, 0x8a},
	{ 0x3d4, 0x6, 0x30},
	{ 0x3d4, 0x7, 0xf0},
	{ 0x3d4, 0x8, 0x0},
	{ 0x3d4, 0x9, 0x61},
	{ 0x3d4, 0x10, 0x20},
	{ 0x3d4, 0x11, 0xa9},
	{ 0x3d4, 0x12, 0x1b},
	{ 0x3d4, 0x13, 0x2d},
	{ 0x3d4, 0x14, 0x0},
	{ 0x3d4, 0x15, 0x1f},
	{ 0x3d4, 0x16, 0x2f},
	{ 0x3d4, 0x17, 0xe3},
	{ 0x3c4, 0x1, 0x1},
	{ 0x3c4, 0x4, 0x6},
	{ 0x3ce, 0x5, 0x40},
	{ 0x3ce, 0x6, 0x5},
	{ 0x3c0, 0x10, 0x41},
	{ 0x3c0, 0x13, 0x0}
	};

Register vm376x564[] =
	{
	{ 0x3c2, 0x0, 0xe7},
	{ 0x3d4, 0x0, 0x6e},
	{ 0x3d4, 0x1, 0x5d},
	{ 0x3d4, 0x2, 0x5e},
	{ 0x3d4, 0x3, 0x91},
	{ 0x3d4, 0x4, 0x62},
	{ 0x3d4, 0x5, 0x8f},
	{ 0x3d4, 0x6, 0x62},
	{ 0x3d4, 0x7, 0xf0},
	{ 0x3d4, 0x8, 0x0},
	{ 0x3d4, 0x9, 0x60},
	{ 0x3d4, 0x10, 0x37},
	{ 0x3d4, 0x11, 0x89},
	{ 0x3d4, 0x12, 0x33},
	{ 0x3d4, 0x13, 0x2f},
	{ 0x3d4, 0x14, 0x0},
	{ 0x3d4, 0x15, 0x3c},
	{ 0x3d4, 0x16, 0x5c},
	{ 0x3d4, 0x17, 0xe3},
	{ 0x3c4, 0x1, 0x1},
	{ 0x3c4, 0x4, 0x6},
	{ 0x3ce, 0x5, 0x40},
	{ 0x3ce, 0x6, 0x5},
	{ 0x3c0, 0x10, 0x41},
	{ 0x3c0, 0x13, 0x0}
	};

Register vm400x300[] =
	{
	{ 0x3c2, 0x0, 0xa7},
	{ 0x3d4, 0x0, 0x71},
	{ 0x3d4, 0x1, 0x63},
	{ 0x3d4, 0x2, 0x64},
	{ 0x3d4, 0x3, 0x92},
	{ 0x3d4, 0x4, 0x65},
	{ 0x3d4, 0x5, 0x82},
	{ 0x3d4, 0x6, 0x46},
	{ 0x3d4, 0x7, 0x1f},
	{ 0x3d4, 0x8, 0x0},
	{ 0x3d4, 0x9, 0x40},
	{ 0x3d4, 0x10, 0x31},
	{ 0x3d4, 0x11, 0x80},
	{ 0x3d4, 0x12, 0x2b},
	{ 0x3d4, 0x13, 0x32},
	{ 0x3d4, 0x14, 0x0},
	{ 0x3d4, 0x15, 0x2f},
	{ 0x3d4, 0x16, 0x44},
	{ 0x3d4, 0x17, 0xe3},
	{ 0x3c4, 0x1, 0x1},
	{ 0x3c4, 0x2, 0xf},
	{ 0x3c4, 0x4, 0x6},
	{ 0x3ce, 0x5, 0x40},
	{ 0x3ce, 0x6, 0x5},
	{ 0x3c0, 0x10, 0x41},
	{ 0x3c0, 0x13, 0x0}
	};

Register vm360x480[] =
	{
	{ 0x3c2, 0x0, 0xe7},
	{ 0x3d4, 0x0, 0x6b},
	{ 0x3d4, 0x1, 0x59},
	{ 0x3d4, 0x2, 0x5a},
	{ 0x3d4, 0x3, 0x8e},
	{ 0x3d4, 0x4, 0x5e},
	{ 0x3d4, 0x5, 0x8a},
	{ 0x3d4, 0x6, 0xd},
	{ 0x3d4, 0x7, 0x3e},
	{ 0x3d4, 0x8, 0x0},
	{ 0x3d4, 0x9, 0x40},
	{ 0x3d4, 0x10, 0xea},
	{ 0x3d4, 0x11, 0xac},
	{ 0x3d4, 0x12, 0xdf},
	{ 0x3d4, 0x13, 0x2d},
	{ 0x3d4, 0x14, 0x0},
	{ 0x3d4, 0x15, 0xe7},
	{ 0x3d4, 0x16, 0x6},
	{ 0x3d4, 0x17, 0xe3},
	{ 0x3c4, 0x1, 0x1},
	{ 0x3c4, 0x4, 0x6},
	{ 0x3ce, 0x5, 0x40},
	{ 0x3ce, 0x6, 0x5},
	{ 0x3c0, 0x10, 0x41},
	{ 0x3c0, 0x13, 0x0}
	};

/*
    readyVgaRegs() does the initialization to make the VGA ready to
	accept any combination of configuration register settings.

	This involves enabling writes to index 0 to 7 of the CRT controller
	(port 0x3d4), by clearing the most significant bit (bit 7) of index
	0x11.
*/

void readyVgaRegs(void)
	{
	int v;
	outportb(0x3d4,0x11);
	v = inportb(0x3d5) & 0x7f;
	outportb(0x3d4,0x11);
	outportb(0x3d5,v);
	}
/*
	outReg sets a single register according to the contents of the
	passed Register structure.
*/

void outReg(Register r)
	{
	switch (r.port)
		{
		/* First handle special cases: */

		case ATTRCON_ADDR:
			inportb(STATUS_ADDR);  		/* reset read/write flip-flop */
			outportb(ATTRCON_ADDR, r.index | 0x20);
										/* ensure VGA output is enabled */
			outportb(ATTRCON_ADDR, r.value);
			break;

		case MISC_ADDR:
		case VGAENABLE_ADDR:
			outportb(r.port, r.value);	/*	directly to the port */
			break;

		case SEQ_ADDR:
		case GRACON_ADDR:
		case CRTC_ADDR:
		default:						/* This is the default method: */
			outportb(r.port, r.index);	/*	index to port			   */
			outportb(r.port+1, r.value);/*	value to port+1 		   */
			break;
		}
	}


/*
	outRegArray sets n registers according to the array pointed to by r.
	First, indexes 0-7 of the CRT controller are enabled for writing.
*/

void outRegArray(Register *r, int n)
	{
	  readyVgaRegs();
	  while (n--) outReg(*r++);
	}

int InitXMode(int whatmode)
{
  vga = (char*)MK_FP(0x0A000, 0);
  int size = sizeof(vm320x200);
  asm{
    mov ax, 0x13
    int 0x10
  };
  switch(whatmode)
  {
    case 0  : outRegArray(vm320x200, sizeof(vm320x200)/4);_Width = 320;_Height = 200;_ScanLine = 80;break;
    case 1  : outRegArray(vm320x240, sizeof(vm320x240)/4);_Width = 320;_Height = 240;_ScanLine = 80;break;
    case 2  : outRegArray(vm256x256, sizeof(vm256x256)/4);_Width = 256;_Height = 256;_ScanLine = 64;break;
    case 3  : outRegArray(vm360x270, sizeof(vm360x270)/4);_Width = 360;_Height = 270;_ScanLine = 90;break;
    case 4  : outRegArray(vm320x400, sizeof(vm320x400)/4);_Width = 320;_Height = 400;_ScanLine = 80;break;
    case 5  : outRegArray(vm400x300, sizeof(vm400x300)/4);_Width = 400;_Height = 300;_ScanLine = 100;break;
    case 6  : outRegArray(vm360x400, sizeof(vm360x400)/4);_Width = 360;_Height = 400;_ScanLine = 90;break;
    case 7  : outRegArray(vm360x480, sizeof(vm360x480)/4);_Width = 360;_Height = 480;_ScanLine = 90;break;
    case 8  : outRegArray(vm360x360, sizeof(vm360x360)/4);_Width = 360;_Height = 360;_ScanLine = 90;break;
    case 9  : outRegArray(vm376x564, sizeof(vm376x564)/4);_Width = 376;_Height = 564;_ScanLine = 94;break;
  }
}

int TextMode()
{
  asm{
    mov ax, 0x3
    int 0x10
  };
}

void PutPixel(int x, int y, char color)
{
   if ((x > 0) && (x < _Width) && (y < _Height) && (y > 0))
   {
      // let's select the plan
      outportb(SEQ_ADDR, 0x02);
      outportb(SEQ_ADDR+1, 0x01 << (x & 3));
      // roll it !
      vga[(unsigned)(_ScanLine * y) + (x / 4)] = color;
   }
}

char GetPixel(int x, int y)
{
}

int GetWidth()
{
   return _Width;
}

int GetHeight()
{
   return _Height;
}

int GetScanLine()
{
   return _ScanLine;
}


void SetRGB(char index, char red, char green, char blue)
{
   red &= 63; green &= 63; blue &= 63;

   outportb(0x3c8, index);
   outportb(0x3c9, red);
   outportb(0x3c9, green);
   outportb(0x3c9, blue);
}

// Only a crap ClearScreen
void ClearScreen()
{
   outport(SEQ_ADDR, 0x0F02);
   memset(vga+1, 0, 0xffff); /* stupid size_t exactly 1 too small */
   vga[0] = 0;
}

// Huh...a nice C Bresenham
void Line(int xstart, int ystart, int xend, int yend, char color)
{
}

// Just a funny HLine - tried some optimizations
// Asmy required for full performance
// Parameters : TOOOOOO obvious :-)
// Comment : no verify; no clip
void HLine(int xstart, int xend, int y, char color)
{
    int xs = xstart | 3;
    int xe = xend-(xend & 3);
    if (xs == xe) return;
    if (xs > xstart) for(int i = xstart; i < xs; i++) PutPixel(i, y, color);
    // all four planes selected
    outport(SEQ_ADDR, 0x0F02);
    memset(vga + y*_ScanLine + (xs)/4, color, (xe - xs+4)/4);
    if (xe < xend) for(int i = xe; i < xend; i++) PutPixel(i, y, color);
}
